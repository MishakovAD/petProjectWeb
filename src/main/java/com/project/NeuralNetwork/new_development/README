Данный пакет предназначен для создания гибконастраеваемой нейронной сети.

Описание пакетов:
Exceptions - пакет, содержащий исключения, которые выбрасываются при некорректной работе с НС.

HelpUtils - пакет, в котором содержится класс для выполнения частоповторяемых действий.

Layers - пакет в котором содержатся классы слоев НС.
    base - пакет, в котором содержатся Enum с типами слоев, интерфейс всех слоев, а так же предок, реализующий данный интерфейс.

NeuralNetwork - пакет, в котором расположены разные виды нейронных сетей, а так же способы их обучения.
    base - интерфейс, который должны реализовывать все НС.
    School - пакет, в котором содержатся классы учителя, а так же "школа", где можно обучать НС, задав все необходимые параметры. Т.е. на вход в школу подается необученная НС, а на выходе получаем умную.

Neuron - пакет, в котором лежат типы нейронов: входной, скрытый, выходной.
    base - пакет, в котором содержится интерфейс и класс предок для всех нейронов.
    function_activation - пакет, в котором лежит основной класс функций активаций, Enum с типами ФА, а так же интерфейс, который реализуют все ФА, кроме Пользовательской ФА, для нее он собственный.
        functions - пакет, в котором лежат реализации определенных ФА.
            user_function - пакет, в котором лежит интерфейс для всех пользовательских ФА. Для создания пользовательской ФА необходимо имплементировать данный интерфейс.
    derivative_fa - пакет, в котором лежит основной класс для вычисления производной функции активации, а так же интерфейс, который он реализует.
        derivative_functions - пакет, в котором лежат реализации производных определенных ФА.
            derivative_user_fa - пакет, в котором лежит интерфейс для вычисления производной пользовательской ФА.


NeuralNetwork создается и обучается следующим образом:
1) Для создания объекта НС необходимо указать:
- Количество нейронов входного слоя (countInputNeurons)
- Количество скрытых слоев (countHiddenLayers)
- Количество нейронов скрытого слоя (countHiddenNeurons)
- Количество нейронов выходного слоя (countOutputNeurons)
--- Дополнительными параметрами можно передать тип функции активации и входные параметры или передать пользовательскую ФА. Для этого необходимо создать класс, который будет реализовывать
интерфейс UserFunction и реализовать в нем единственный метод. А потом, объект этого класса передать в конструктор НС.
2) При указании корректных параметров, будет создан объект, в котором последовательно инициализируются:
- Входной слой с указанным количеством нейронов
- Массив скрытых слоев (если их число указано больше, чем 0), для каждого элемента массива будут инициализированы указанное колличество нейронов для скрытого слоя
- Выходной слой с указанным числом выходных нейронов.
3) После инициализации слоев НС, происходит создание и инициализация всех нейронов для каждого слоя. Важно учитывать, что та ФА, которая была передана параметром при создании НС будет
использоваться для КАЖДОГО нейрона сети. В дальнейшем изменить функцию нельзя (пока 18.10.2019). Каждый нейрон обладает рядом свойств и методов, о которых можно прочитать отдельно.
//TODO: составить документ, описывающий поля и методы каждого класса.
4) Для запуска вычислений ответа нейронной сети есть метод setInputData(double[] data), на вход которому подаются входные данные для НС, а для
получения результата используется метод getOutput(). Важно понимать, что НС, это взаимосвязанные объекты, и при создании новой НС, это будут уже новые объекты с другими свойствами, а при обучении
меняются свойства конкретной НС, которая передается в "школу".
5) Для обучения необходимо: