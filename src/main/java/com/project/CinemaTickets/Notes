Файл для заметок.
1) Необходимо в парсерах проверить работоспособность создания ссылки с помощью Google, так как
есть вероятность, что свои классы он меняет, но не меняет id. Пример есть в plProxyServer.
2) Обязательно сделать проверку по названиям фильмов, чтобы не было, если пользователь введет с маленькой буквы, то фильм не найдется в БД
3) Для того, чтобы обрабатывать запросы по мере их поступления, необходимо реализовать старую логику с разными URL request
где мы можем каждый элемент отправить по своему адресу, а в контроллере создать приватную переменную Сессион, муви, синема Листы.
И по мере поступления запросов наполнять и сортировать их.
4) Поиск по ближайшим местам из запроса надо осуществлять по метро, название кинотеатров, адресу (при том, что если не было найдено совпадения в одном из поисков - переходить к другим.
5) На стороне сервера сделать проверку введенного названия фильма и если такого нет в базе, то возвращать ошибку
6) Сделать выборку сеансов еще и по дате. Учесть дату в сравнении по времени. Если есть дата, можно отключить, если нет, то дата сегодняшняя и проверяем.
7) Кинопоиск, видимо, может менять ссылки на кинотеатры. Нужно создавать задачу, чтобы проверять работоспособность ссылки
и если что, находить новую и обновлять (меняется id города - что заметил)
8) При скачивании страницы сделать сначала проверку на код ответа, а уже потом на содержимое страницы. Вдруг страница недоступна, а мы сразу через прокси пойдем.
9) сделать перенаправление ссылки с каптчей на живого человека, чтобы вводил и дать доступ к айписервера, чтобы через него проходило соединение (как?)
Типа человек вводит капчу через прокси сервер моего сервера
10) РЕФАКТОРИНГ: Перенести вызовы напрямую БД из контроллера в UserLogic
11) РЕФАКТОРИНГ: Посмотреть, что можно и как сделать на react





-----------------------------------------------------------------------
РЕФАКТОРИНГ:
1) Изменить структуры ДБ, сделать таблицы связанными друг с другом и переделать запросы, чтобы можно было быстрее получать фильмы или сеансы по фильму
Кинотеатр (добавить столбец Город и заполнять его при вставке)



******************************************
/**************** SQL********************/
create table petproject.cinema
(
	id serial not null,
	cinema_name varchar(200) not null,
	cinema_address varchar(500) not null,
	cinema_underground varchar(100),
	cinema_city varchar(200),
	url_to_afisha varchar(300),
	url_to_yandex_afisha varchar(300),
	url_to_kinopoisk varchar(300),
	info_about_cinema VARCHAR(500),
	cinema_id varchar(100) not null
);

create unique index cinema_cinema_address_uindex
	on petproject.cinema (cinema_address);

create unique index cinema_cinema_id_uindex
	on petproject.cinema (cinema_id);

create unique index cinema_id_uindex
	on petproject.cinema (id);

alter table petproject.cinema
	add constraint cinema_pk
		primary key (id);

----------------------------------------------

create table petproject.movie
(
	id serial not null,
	movie_name varchar(200) not null,
	movie_rating varchar(20),
	movie_date varchar(200),
	movie_id varchar(200) not null
);

create unique index movie_id_uindex
	on petproject.movie (id);

create unique index movie_movie_id_uindex
	on petproject.movie (movie_id);

create unique index movie_movie_name_uindex
	on petproject.movie (movie_name);

alter table petproject.movie
	add constraint movie_pk
		primary key (id);


----------------------------------------

create table petproject.session
(
	id serial not null,
	time_of_show varchar(100) not null,
	type_of_show varchar(100),
	price varchar(100),
	url_for_buy_tickets varchar(500),
	session_date varchar(100) not null,
	movie_id varchar(100) not null
		constraint session_movie_id_fk
			references petproject.movie (movie_id)
				on update cascade on delete cascade,
	cinema_id varchar(100) not null
		constraint session_cinema_id_fk
			references petproject.cinema (cinema_id)
				on update cascade on delete cascade,
	session_id varchar(200) not null
);


create unique index session_id_uindex
	on petproject.session (id);

create unique index session_session_id_uindex
	on petproject.session (session_id);

create unique index session_url_for_buy_tickets_uindex
	on petproject.session (url_for_buy_tickets);

alter table petproject.session
	add constraint session_pk
		primary key (id);



------------------------------------------------------


create table petproject.cinema_movie
(
	id serial not null,
	cinema_id varchar(100) not null
		constraint cinema_movie_cinema_id_fk
			references petproject.cinema (cinema_id)
				on update cascade on delete cascade,
	movie_id varchar(100) not null
		constraint cinema_movie_movie_id_fk
			references petproject.movie (movie_id)
				on update cascade on delete cascade
);

create unique index cinema_movie_id_uindex
	on petproject.cinema_movie (id);

alter table petproject.cinema_movie
	add constraint cinema_movie_pk
		primary key (id);




******************************************
/****************OLD SQL********************/
create table cinema
(
    id            serial       not null
        constraint cinema_pk
            primary key,
    cinema_name          varchar(100) not null,
    cinema_address       varchar(200),
    cinema_underground   varchar(100),
    url_to_afisha        varchar(200),
    url_to_yandex_afisha varchar(200),
    url_to_kinopoisk     varchar(200),
    info_about_cinema    varchar(200)
);

comment on table cinema is 'Таблица, содержащая все кинотеатры.';

alter table cinema
    owner to postgres;

/**************** SQL********************/

create table movie
(
    movie_id     serial       not null
        constraint movie_pk
            primary key,
    movie_name   varchar(100) not null,
    movie_rating varchar(10),
    movie_date   varchar(20),
    id    integer,
    parent       varchar(100)
);

comment on table movie is 'Таблица, содержащая все фильмы, идущие в кинотеатрах.';

alter table movie
    owner to postgres;

/**************** SQL********************/

create table session
(
    session_id          serial      not null
        constraint session_pk
            primary key,
    time_of_show        varchar(10) not null,
    type_of_show        varchar(10) not null,
    price               varchar(20),
    url_for_buy_tickets varchar(100),
    session_date        varchar(20),
    movie_id            integer,
    parent              varchar(100)
);

alter table session
    owner to postgres;

/**************** SQL********************/
******************************************