Файл для заметок.
1) Необходимо в парсерах проверить работоспособность создания ссылки с помощью Google, так как
есть вероятность, что свои классы он меняет, но не меняет id. Пример есть в plProxyServer.
2) Обязательно сделать проверку по названиям фильмов, чтобы не было, если пользователь введет с маленькой буквы, то фильм не найдется в БД
3) Для того, чтобы обрабатывать запросы по мере их поступления, необходимо реализовать старую логику с разными URL request
где мы можем каждый элемент отправить по своему адресу, а в контроллере создать приватную переменную Сессион, муви, синема Листы.
И по мере поступления запросов наполнять и сортировать их.
4) Поиск по ближайшим местам из запроса надо осуществлять по метро, название кинотеатров, адресу (при том, что если не было найдено совпадения в одном из поисков - переходить к другим.


-----------------------------------------------------------------------
РЕФАКТОРИНГ:
1) Изменить структуры ДБ, сделать таблицы связанными друг с другом и переделать запросы, чтобы можно было быстрее получать фильмы или сеансы по фильму
Кинотеатр (добавить столбец Город и заполнять его при вставке)



******************************************
/**************** SQL********************/
create table cinema
(
    cinema_id            serial       not null
        constraint cinema_pk
            primary key,
    cinema_name          varchar(100) not null,
    cinema_address       varchar(200),
    cinema_underground   varchar(100),
    url_to_afisha        varchar(200),
    url_to_yandex_afisha varchar(200),
    url_to_kinopoisk     varchar(200),
    info_about_cinema    varchar(200)
);

comment on table cinema is 'Таблица, содержащая все кинотеатры.';

alter table cinema
    owner to postgres;

/**************** SQL********************/

create table movie
(
    movie_id     serial       not null
        constraint movie_pk
            primary key,
    movie_name   varchar(100) not null,
    movie_rating varchar(10),
    movie_date   varchar(20),
    cinema_id    integer,
    parent       varchar(100)
);

comment on table movie is 'Таблица, содержащая все фильмы, идущие в кинотеатрах.';

alter table movie
    owner to postgres;

/**************** SQL********************/

create table session
(
    session_id          serial      not null
        constraint session_pk
            primary key,
    time_of_show        varchar(10) not null,
    type_of_show        varchar(10) not null,
    price               varchar(20),
    url_for_buy_tickets varchar(100),
    session_date        varchar(20),
    movie_id            integer,
    parent              varchar(100)
);

alter table session
    owner to postgres;

/**************** SQL********************/
******************************************